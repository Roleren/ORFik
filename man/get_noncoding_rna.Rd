% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genome_download_helper.R
\name{get_noncoding_rna}
\alias{get_noncoding_rna}
\title{Download genome (fasta), annotation (GTF) and contaminants}
\usage{
get_noncoding_rna(ncRNA, output.dir, organism, gunzip)
}
\arguments{
\item{ncRNA}{logical or character, default FALSE (not used, no download),
ncRNA is used as a contaminant genome.
If TRUE, will try to find ncRNA sequences from the gtf file, usually represented as
lncRNA (long noncoding RNA's). Will let you know if no ncRNA sequences were found in
gtf.\cr If not found try character input:\cr
Alternatives: "auto" or manual assign like "human".
If "auto" will try to find ncRNA file on NONCODE from organism,
Homo sapiens -> human etc. "auto" will not work for all,
then you must specify the name used by
NONCODE, go to the link below and find it.
If not "auto" / "" it must be a character vector
of species common name (not scientific name) Homo sapiens is human,
Rattus norwegicus is rat etc, download ncRNA sequence to filter out with.
From NONCODE online server, if you cant find
common name see: http://www.noncode.org/download.php/}

\item{output.dir}{directory to save downloaded data}

\item{organism}{scientific name of organism, Homo sapiens,
Danio rerio, Mus musculus, etc. See \code{biomartr:::get.ensembl.info()}
for full list of supported organisms.}

\item{gunzip}{logical, default TRUE, uncompress downloaded files
that are zipped when downloaded, should be TRUE!}
}
\value{
a named character vector of path to genomes and gtf downloaded,
 and additional contaminants if used. If merge_contaminants is TRUE, will not
 give individual fasta files to contaminants, but only the merged one.
}
\description{
This function automatically downloads (if files not already exists)
genomes and contaminants specified for genome alignment.
Will create a R transcript database (TxDb object) from the annotation. \cr
It will also index the genome for you\cr
If you misspelled something or crashed, delete wrong files and
run again.\cr
Do remake = TRUE, to do it all over again.
}
\details{
If you want custom genome or gtf from you hard drive, assign it
after you run this function, like this:\cr
annotation <- getGenomeAndAnnotation(GTF = FALSE, genome = FALSE)\cr
annotation["genome"] = "path/to/genome.fasta"\cr
annotation["gtf"] = "path/to/gtf.gtf"
}
\examples{

## Get Saccharomyces cerevisiae genome and gtf (create txdb for R)
#getGenomeAndAnnotation("Saccharomyces cerevisiae", tempdir(), assembly_type = "toplevel")
## Get Danio rerio genome and gtf (create txdb for R)
#getGenomeAndAnnotation("Danio rerio", tempdir())

output.dir <- "/Bio_data/references/zebrafish"
## Get Danio rerio and Phix contamints to deplete during alignment
#getGenomeAndAnnotation("Danio rerio", output.dir, phix = TRUE)

## Optimize for ORFik (speed up for large annotations like human or zebrafish)
#getGenomeAndAnnotation("Danio rerio", tempdir(), optimize = TRUE)

## How to save malformed refseq gffs:
## First run function and let it crash:
#annotation <- getGenomeAndAnnotation(organism = "Arabidopsis thaliana", output.dir = "~/Desktop/test_plant/",
#  assembly_type = "primary_assembly", db = "refseq")
## Then apply a fix (example for linux, too long rows):
# \code{system("cat ~/Desktop/test_plant/Arabidopsis_thaliana_genomic_refseq.gff | awk '{ if (length($0) < 32768) print }' > ~/Desktop/test_plant/Arabidopsis_thaliana_genomic_refseq_trimmed2.gff")}
## Then updated arguments:
annotation <- c("~/Desktop/test_plant/Arabidopsis_thaliana_genomic_refseq_trimmed.gff",
 "~/Desktop/test_plant/Arabidopsis_thaliana_genomic_refseq.fna")
names(annotation) <- c("gtf", "genome")
# Make the txdb (for faster R use)
# makeTxdbFromGenome(annotation["gtf"], annotation["genome"], organism = "Arabidopsis thaliana")

}
\seealso{
Other STAR: 
\code{\link{STAR.align.folder}()},
\code{\link{STAR.align.single}()},
\code{\link{STAR.allsteps.multiQC}()},
\code{\link{STAR.index}()},
\code{\link{STAR.install}()},
\code{\link{STAR.multiQC}()},
\code{\link{STAR.remove.crashed.genome}()},
\code{\link{install.fastp}()}
}
\keyword{internal}
